from django.db import models
from time import time
from django.core.files import File
from django.core.files.storage import FileSystemStorage 
from django.utils import timezone

"""
Method for uploading file specific to location in location 'assets/uploaded/' an appending with time of creation
This is used for storing files and maintaining a certain uniqueness in files
"""

def get_upload_file_name(instance,filename):
	return 'assets/uploaded_files/%s_%s' %(str(time()).replace('.','_'),filename)

"""
Database controlled and upgraded in models.py
All the tables implemented using Access Control Matrix(ACM) and permissions are suitably granted in models.py
The Table are : (1) User abreviated as 'MyUser' (2) Article abreviated as 'Article' (3) Comments abreviated as 'Comments'
"""

"""
Abstract User Entity class defining attributes of several entity in a top to down manner.
At abstract level MyUser has attributes 
a) id - primary key (Autogenerated and hidden from users)
b) "user_name" - primary key
c) user_permission - grant permission to various class of user like Guest , Admin , Faculty , Student
d) posts - access to all the 
e) link - save the link used for password recovery and has been hashed for safety purpose (OTP)
f) user_email - user's email id 
g) user_college - user's college
h) user_photo - user's photo 
"""

class MyUser(models.Model) : 
	id = models.AutoField(primary_key = True)
	user_name = models.CharField(max_length = 25)
	user_password = models.CharField(max_length = 25)
	user_permission = models.IntegerField(default=2)
	posts = models.IntegerField(default=10)
	link = models.CharField(max_length=50, default="")
	user_email = models.CharField(max_length = 30 , blank=False, null=False)
	user_college = models.CharField(max_length = 50 , blank=False, null=False)
	photo = models.FileField(upload_to = get_upload_file_name,default="himanshu.jpeg")

"""
Partial weak entity set 'Article' as the existence is not directly dependent on existence of users
User can create articles who have user_permission = {0,1} i.e Admin and Faculty
All other users can read the Articles
Edit and deleted permission rights are reserved for the author of the article
a) id - primary key (Autogenerated)
b) title - non unique key
c) key - Marks if article is deleted or not
d) body - main text
e) date - Datetime field of creation of article
f) author - single field
g) num_comm - stores the number of commments
h) likes - stores number of comments
i) doc - stores asscoiated files
"""

class Article(models.Model):
	id = models.AutoField(primary_key=True, blank=False, null=False)	
	title = models.CharField(max_length=30, blank=False, null=False)
	key = models.BooleanField(blank=False, null=False, default=True)
	body = models.TextField()
	tag = models.CharField(max_length=30, help_text="Max. Characters = 30", blank=True, null=True)
	date = models.DateTimeField(auto_now_add=True, auto_now=False, default=timezone.now())
	like_articles = models.CharField(max_length=1000, default="")
	author = models.CharField(default="himanshu",max_length=50)
	num_comm = models.IntegerField(default=0)
	likes = models.IntegerField(default=0)
	doc = models.FileField("Attachment", upload_to=get_upload_file_name, blank=True, null=True)
	def add_comments(comments):					#get a instance of comment class to be associated with this Article 
		all_stored_comments.append(comments)			#append / add instance of Comments in all_stored_comments list	

	def __unicode__self(self):
		return self.title

"""
Weak Entity set dependent completely on the Article's existence
contains comments which have id (Autogenerated) 'parent_article_id' as foreign key which can be mapped to generate all the associated comments
a) comment - contains the main comment
b) id - autogenerated  
c) author - unique key
d) parent_article_id - unique key
e) date - Date of creation in  DateTime format
"""

class Comments(models.Model):						#Class Comments to be added as child for each post
	comment = models.TextField()					#Text associsted with Comments
	id = models.AutoField(primary_key=True)
	author = models.CharField(max_length=50, default="himanshu")
	parent_article_id = models.CharField(max_length = 50,default = "")
	date = models.DateTimeField(auto_now_add=True, auto_now=False, default=timezone.now())
	def __unicode__self(self):
			return self.comment